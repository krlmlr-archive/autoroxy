% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/rox.R
\name{rox}
\alias{rox}
\alias{rox_off}
\alias{rox_on}
\title{Turn version-controlled documentation on and off}
\usage{
rox_on(pkg = ".")

rox_off(pkg = ".")
}
\arguments{
\item{pkg}{package description, can be path or package name.  See
\code{\link{as.package}} for more information}
}
\description{
Documentation, if generated automatically by, e.g., \code{roxygen2},
is a build artifact that ideally should not be added to a version
control system.  On the other hand, it seems necessary to
version-control the documentation:
\itemize{
  \item direct installation (via R CMD \code{\link[utils]{INSTALL}} and others)
    and building a source archive
    requires fully built documentation
  \item the generated documentation depends not only on the package
    itself, but also on \code{roxygen2} and perhaps
    other packages that are used in the generation process.
}
These functions attempt to work around this
dilemma.
}
\details{
It is assumed that Git is used to version-control the package.
The functions switch between two states: ignoring and versioning
documentation, abbreviated by ``off'' and ``on'' mode.
(This affects only the \code{man} directory, the \code{NAMESPACE}
and \code{DESCRIPTION} files are always version-controlled.)
Currently, this is an all-or-nothing decision:
It is not possible to keep only selected files version-controlled.
Even in ``off'' mode, it can be built like usual -- only that
the changes in the generated files are not tracked by the version control
system. Moreover, in ``off'' mode a file that contains the body of
\code{\link{autoroxy}} is written to a special file in the \code{R} directory;
this has the effect that documentation is available even with
\code{R CMD INSTALL} but is harmless otherwise.  (This special file is
removed again in ``on'' mode.)

The Git repository must be in a clean state, i.e., the command
\code{git status} shows no changes.
On success, the changes are committed to Git.
When repeatedly calling the same function twice, the second call should have
no effect.

Repeatedly turning documentation on an off in the same branch
clutters the history.  Hence, it is recommended to perform
development in a dedicated \emph{development} branch and keep the
documentation only in a \emph{release} branch.  This is achieved
easily by using \code{git flow} -- documentation can be turned
off in the \code{develop} branch (and hence all feature branches),
turned on again as soon as a release is started, and turned off
after merging a released version back to \code{develop}.
Hooks can help automating this process.
As the history in the \code{master} branch contains
only merges from release branches, even repeated turning off and on
of documentation in development branches doesn't show in the mainline
history of \code{master}.  Remember to run at least
\code{git diff --name-status master..} before finishing a release.
}
\references{
Vincent Driessen:
  \href{nvie.com/posts/a-successful-git-branching-model/}{Git Flow: A successful branching model},
  blog post

  Git Flow, \href{https://github.com/petervanderdoes/gitflow}{AVH edition}
}
\seealso{
\code{\link[devtools]{as.package}},
  \code{\link[devtools]{install}},
  \code{\link[roxygen2]{roxygenize}}
}

